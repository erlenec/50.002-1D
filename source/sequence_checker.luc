module sequence_checker (
    input buttons[4],
    input clk,  // clock
    input rst,  // reset
    output out_buttonseq[14]
  ) 

{
  dff sequence[14](#INIT(0), .clk(clk), .rst(rst));
  dff countA[7](#INIT(0),.clk(clk), .rst(rst));
  dff countB[7](#INIT(0),.clk(clk), .rst(rst));
  
  
  fsm check(.clk(clk), .rst(rst)) = {
    START,
    STOP
  };
    

  always{     
    case (check.q)
    {
      check.START:
      //button 3: PA button 1
      //button 2: PA button 0 
        
      //button 1: PB button 1
      //button 0: PB button 0
        if (countA.q == 13 & countB.q == 6){
          check.d = check.STOP;
        }
        else if (buttons[3] | buttons[2] | buttons[1] | buttons[0]){ //if any button is pressed
        
          if (buttons[3]){
              //PA Button 1
              sequence.d[countA.q] = b1;
              countA.d = countA.q + 1; 
            }
          else if (buttons[2]){
              //PA Button 0
              sequence.d[countA.q] = b0;
              countA.d = countA.q + 1;
            }
          else if (buttons[1]){
              //PB Button 1
              sequence.d[countB.q] = b1;
              countB.d = countB.q + 1; 
            }
          else if (buttons[0]){
              ////PB Button 0
              sequence.d[countB.q] = b0;
              countB.d = countB.q + 1; 
            }           
            check.d = check.START;
        }
        else{
            check.d = check.START; //if no press, loop 
        }

        
      default: countA.d = 7;
      default: countB.d = 0;
    }
    
    out_buttonseq = sequence.q;
    
    
   


}
}